import cv2
import numpy
import math
from enum import Enum
import argparse
import imutils
from networktables import NetworkTables

NetworkTables.initialize(server='roborio-6445-frc.local')
sd = NetworkTables.getTable('SmartDashboard')


class GripPipeline:
    # An OpenCV pipeline generated by GRIP.

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """
        self.source0 = cv2.VideoCapture(0)
        self.__hsv_threshold_hue = [38.09089118939224, 86.13255726266553]
        self.__hsv_threshold_saturation = [82.55395683453237, 255.0]
        self.__hsv_threshold_value = [197.21223021582733, 255.0]

        self.hsv_threshold_output = None

        self.__cv_erode_src = self.hsv_threshold_output
        self.__cv_erode_kernel = None
        self.__cv_erode_anchor = (-1, -1)
        self.__cv_erode_iterations = 1.0
        self.__cv_erode_bordertype = cv2.BORDER_CONSTANT
        self.__cv_erode_bordervalue = (-1)

        self.cv_erode_output = None

        self.__mask_mask = self.cv_erode_output

        self.mask_output = None

        self.__find_contours_input = self.hsv_threshold_output
        self.__find_contours_external_only = False

        self.find_contours_output = None

        self.__convex_hulls_contours = self.find_contours_output

        self.convex_hulls_output = None

    def process(self, source0):
        #does this run as a loop or thread?
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_input = source0
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue,
                                                           self.__hsv_threshold_saturation, self.__hsv_threshold_value)

        # Step CV_erode0:
        self.__cv_erode_src = self.hsv_threshold_output
        (self.cv_erode_output) = self.__cv_erode(self.__cv_erode_src, self.__cv_erode_kernel, self.__cv_erode_anchor,
                                                 self.__cv_erode_iterations, self.__cv_erode_bordertype,
                                                 self.__cv_erode_bordervalue)

        # Step Mask0:
        self.__mask_input = source0
        self.__mask_mask = self.cv_erode_output
        (self.mask_output) = self.__mask(self.__mask_input, self.__mask_mask)

        # Step Find_Contours0:
        self.__find_contours_input = self.hsv_threshold_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input,
                                                           self.__find_contours_external_only)

        # Step Convex_Hulls0:
        self.__convex_hulls_contours = self.find_contours_output
        (self.convex_hulls_output) = self.__convex_hulls(self.__convex_hulls_contours)
        # run Calc-0ffset:
        __calc_offset(self.covex_hulls_output)

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]), (hue[1], sat[1], val[1]))

    @staticmethod
    def __cv_erode(src, kernel, anchor, iterations, border_type, border_value):
        """Expands area of lower value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for erosion. A numpy.ndarray.
           iterations: the number of times to erode.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after erosion.
        """
        return cv2.erode(src, kernel, anchor, iterations=(int)(iterations + 0.5),
                         borderType=border_type, borderValue=border_value)

    @staticmethod
    def __mask(input, mask):
        """Filter out an area of an image using a binary mask.
        Args:
            input: A three channel numpy.ndarray.
            mask: A black and white numpy.ndarray.
        Returns:
            A three channel numpy.ndarray.
        """
        return cv2.bitwise_and(input, input, mask=mask)

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if (external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __convex_hulls(input_contours):
        """Computes the convex hulls of contours.
        Args:
           input_contours: A list of numpy.ndarray that each represent a contour.
        Returns:
            A list of numpy.ndarray that each represent a contour.
        """
        output = []
        for contour in input_contours:
            output.append(cv2.convexHull(contour))
        return output

    @staticmethod
    def __calc_offset(input):
        cntx = 540
        cnty = 360
        auto_valuen = sd.getAutoUpdateValue('robotTime', 0)
        while (True):
            try:
                input = input[0] if imutils.is_cv2() else input[1]
                for i in input:
                    M = cv2.moments(i)
                    cX[i] = int(M["m10"] / M["m00"])
                    cY[i] = int(M["m01"] / M["m00"])
                    if cntx > cX[0] and cX[1] > cntx:
                        pixels_off = cntx - cX[0]
                        if pixels_off < 10:
                            # sd.putValue("Turn Right", turn_Dir)
                            sd.putValue(2, turn_Deg)
                        if pixels_off > 10 and pixels_off < 31:
                            # sd.putValue("Turn Right", turn_Dir)
                            sd.putValue(4, turn_Deg)
                        if pixels_off > 31 and pixels_off < 100:
                            # sd.putValue("Turn Right", turn_Dir)
                            sd.putValue(12, turn_Deg)
                        if pixels_off > 100:
                            # sd.putValue("Turn Right", turn_Dir)
                            sd.putValue(20, turn_Deg)
                        if cntx == cX[0] and cX[1] == cntx:
                            sd.put("lined_up", turn_Dir)
                            # sd.put("Move forward", turn_Dir)
                    if cntx > cX[0] and cx[1] < cntx:
                        pixels_offcX = cntx - cx[0]
                        pixels_offcX1 = cntx - cx[1]
                        if pixels_offcX < 10 and pixels_offcX1 < 10:
                           # sd.putValue("Turn Right", turn_Dir)
                            sd.putValue(4, turm_Deg)
                        if pixels_offcX > 10 and pixels_offcX1 > 10 and pixels_offcX < 100 and pixels_OffcX1 < 100:
                            #sd.putValue("Turn Right", turn_Dir)
                            sd.putValue(6, turn_Deg)
                        if pixel_offcX > 100 and pixel_offcX1 > 100:
                           # sd.putValue("Turn Right", turn_Dir)
                            sd.putValue(20, turn_Deg)
                    if cntx < cX[0] and cX[1] < cntx:
                        pixels_offcX = cntx - cx[0]
                        pixels_offcX1 = cntx - cx[1]
                        if pixels_offcX1 < 10:
                            #sd.putValue("Turn Left")
                            sd.putValue(-2, turn_Deg)
                        if pixels_offcX1 > 10 and pixels_offcX1 < 31:
                            #sd.putValue("Turn Left", turn_Dir)
                            sd.putValue(-4, turn_Deg)
                        if pixels_offcX1 > 100:
                            #sd.putValue("Turn Left", turn_Dir)
                            sd.putValue(-20, turn_Deg)
                    if auton_value > 15:
                        break
                        # More statements?
            finally:
                print("times up")
